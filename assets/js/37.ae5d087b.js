(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{413:function(t,e,a){"use strict";a.r(e);var s=a(51),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"aws-athena"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aws-athena"}},[t._v("#")]),t._v(" AWS Athena")]),t._v(" "),a("p",[a("em",[t._v("Supported since 5.0.2.")])]),t._v(" "),a("p",[t._v("Through the "),a("a",{attrs:{href:"https://aws.amazon.com/athena/",target:"_blank",rel:"noopener"}},[t._v("Athena"),a("OutboundLink")],1),t._v(" connector, Ontop is able to construct VKGs on AWS Athena databases using the "),a("a",{attrs:{href:"https://docs.aws.amazon.com/athena/latest/ug/connect-with-jdbc.html",target:"_blank",rel:"noopener"}},[t._v("Simba Athena JDBC Driver"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"limitations-exceptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limitations-exceptions"}},[t._v("#")]),t._v(" Limitations & Exceptions")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Athena does not provide information about integrity constraints. Make sure to provide this information in order to avoid very inefficient queries.\nWe recommend using "),a("a",{attrs:{href:"/guide/advanced/lenses"}},[t._v("lenses")]),t._v(" for this purpose.")])]),t._v(" "),a("ul",[a("li",[t._v("The Simba Athena JDBC does not support the use of default databases when connecting to Athena.")]),t._v(" "),a("li",[t._v('Accessing object fields with the "dot operator" is not supported (see below).')])]),t._v(" "),a("h2",{attrs:{id:"database-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#database-connection"}},[t._v("#")]),t._v(" Database Connection")]),t._v(" "),a("p",[t._v("The following shows the content of a sample "),a("code",[t._v(".properties")]),t._v(" file that can be used to connect Ontop to Athena:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("jdbc.url "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jdbc:awsathena://AwsRegion"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("eu-central-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("S3OutputLocation")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s3://result-location\njdbc.user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user\njdbc.password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" password\njdbc.driver "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" com.simba.athena.jdbc.Driver\n")])])]),a("h2",{attrs:{id:"nested-type-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nested-type-support"}},[t._v("#")]),t._v(" Nested Type Support")]),t._v(" "),a("p",[t._v("Ontop implements explicit compatibility with the Athena array type "),a("code",[t._v("ARRAY<T>")]),t._v(". When used with the "),a("a",{attrs:{href:"/guide/advanced/lenses#flattenlens"}},[t._v("flatten lens")]),t._v(", it is able to automatically infer the type of the result column.")]),t._v(" "),a("p",[t._v("The flatten lens cannot be used on arrays stored as JSON-encoded columns in the database. For such use cases, the column first has to be converted to an array type.")]),t._v(" "),a("h3",{attrs:{id:"struct-access"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-access"}},[t._v("#")]),t._v(" Struct Access")]),t._v(" "),a("p",[t._v("Individual "),a("code",[t._v("MAP")]),t._v(" objects can be accessed by SQL expressions in the dialect's default way:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT my_struct['my_attribute'] FROM ...\n")])])]),a("p",[a("code",[t._v("ROW")]),t._v(" objects, can also be accessed using the "),a("code",[t._v("[key]")]),t._v(" operator. Please note, that in this case, "),a("code",[t._v("key")]),t._v(" must be an integer index instead of the name of the field:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("SELECT my_struct[1] FROM ...\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v('Accessing object fields using the "dot operator" is not supported. Please use the '),a("code",[t._v("[]")]),t._v(" operator instead.")])])])}),[],!1,null,null,null);e.default=n.exports}}]);