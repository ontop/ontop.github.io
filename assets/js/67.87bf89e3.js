(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{443:function(t,e,n){"use strict";n.r(e);var i=n(51),a=Object(i.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"notation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notation"}},[t._v("#")]),t._v(" Notation")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("TODO: CHECK/UPDATE (2 years old and formatted in AsciiDocs)")])]),t._v(" "),n("p",[t._v("We assume a countably infinite domain D being queried,\na finite set P of predicates disjoint from D,\nand an interpretation function ||.|| defined over P,\nwhich to each predicate p in P associates a subset ||p|| of (D \\union {NULL})^i^,\nfor some positive integer i.\nThe "),n("em",[t._v("signature")]),t._v(" sig(Q) of a (sub)query Q is a subset of P.\nAn the interpretation ||Q|| of Q is built inductively as usual,\nout of all ||p|| such that p is sig(Q),\nby application of RA operators.")]),t._v(" "),n("p",[t._v("In addition,\nwe assume a countably infinite set A of attribute names,\ndistinct from D and P.\nIf ||Q|| is the interpretation of (sub)query Q,\nthen the function att(||Q||) associates to ||Q|| a finite tuple ofn distinct elements of A,\nand n is called the "),n("em",[t._v("arity")]),t._v(" of ||Q||.")]),t._v(" "),n("p",[t._v("NOTE: It is also assumed in what follows that the algebraic expression corresponding to an intermediate query is syntactically valid,\naccording to standard requirements on RA operators.\nFor instance,\nwhen a projection is performed,\nthe projected attributes must be a subset of the attributes of the argument relation.\nSimilarly,\nthe arguments of a union operator must have identical set of attributes (this is not natively the case of the UNION SPARQL operator,\nbut can be enforced with a straightforward normalization).")])])}),[],!1,null,null,null);e.default=a.exports}}]);