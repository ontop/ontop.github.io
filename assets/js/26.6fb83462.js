(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{404:function(e,t,s){"use strict";s.r(t);var a=s(51),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"known-issues"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#known-issues"}},[e._v("#")]),e._v(" Known issues")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("THIS PAGE IS OUTDATED.")]),e._v(" "),s("p",[e._v("TODO: check these points and move them somewhere else if still relevant.")])]),e._v(" "),s("h2",{attrs:{id:"rdf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rdf"}},[e._v("#")]),e._v(" RDF")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("GRAPH")]),e._v(" is not supported yet")])]),e._v(" "),s("h2",{attrs:{id:"sparql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sparql"}},[e._v("#")]),e._v(" SPARQL")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("ORDER BY")]),e._v(" doesn't support functions as parameters, accepts variables only. Example:")])]),e._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ORDER")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("BY")]),e._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("?o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n   \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ORDER")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("BY")]),e._v(" xsd:"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("?o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("ORDER")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("BY")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("?o1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" ?o2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),s("ul",[s("li",[s("p",[s("code",[e._v("REGEX")]),e._v(" is not supported by MsSQL and DB2, while the other databases handle it differently: see [[Regex SPARQL filter]]")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("URI")]),e._v(" with a hierarchical directory path of the form directory/directory/.../name are supported if we use them without prefix or with complete prefix. Example we can query "),s("code",[e._v("<http://en.wikipedia.org/wiki/BMW_7_Series#section/help>")]),e._v(" using it as it is  or with a complete prefix as:")])])]),e._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("PREFIX bmwSection: http:"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//en.wikipedia.org/wiki/BMW_7_Series#section/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" {?x ?y bmwSection:help}\n")])])]),s("p",[e._v("It is not supported the form:")]),e._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[e._v("PREFIX bmw: http:"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//en.wikipedia.org/wiki/BMW_7_Series#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("SELECT")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("WHERE")]),e._v(" {?x ?y bmw:section"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("help}\n")])])]),s("ul",[s("li",[e._v("No support for cast functions (e.g. xsd:string(...), xsd:integer(...) ).")]),e._v(" "),s("li",[s("code",[e._v("REPLACE")]),e._v(" function is supported with some limitations based on the database used. See [[Replace SPARQL filter]].")]),e._v(" "),s("li",[e._v("Do not use "),s("code",[e._v("SELECT Expressions")]),e._v(" with more variable declarations, use the correspondant version with BIND. Example:\nInstead of:")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("SELECT  ?title (?p AS ?fullPrice) (?fullPrice*?discount) AS ?customerPrice)\n{ ?x ns:price ?p .\n  ?x dc:title ?title . \n  ?x ns:discount ?discount .\n}\n")])])]),s("p",[e._v("Use:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("SELECT  ?title  (?fullPrice*?discount) AS ?customerPrice)\n{ \n  ?x dc:title ?title . \n  ?x ns:discount ?discount .\n  BIND (?p AS ?fullPrice)\n  ?x ns:price ?fullPrice .\n}\n")])])]),s("ul",[s("li",[e._v("Hash functions in oracle are supported only if DBMS_CRYPTO is enabled by the DBA.")]),e._v(" "),s("li",[s("code",[e._v("Hash")]),e._v(", "),s("code",[e._v("timezone")]),e._v(" and "),s("code",[e._v("uiid")]),e._v(" functions are supported based on the database see [[OntopSPARQLFunctions |Supported Sparql Functions]] for more information.")]),e._v(" "),s("li",[e._v("Using Oracle "),s("code",[e._v("strBefore")]),e._v(" and "),s("code",[e._v("strAfter")]),e._v(" SPARQL functions return null instead of an empty string when no result has been found.")]),e._v(" "),s("li",[s("code",[e._v("IF")]),e._v(", "),s("code",[e._v("COALESCE")]),e._v(", "),s("code",[e._v("EXISTS")]),e._v(", "),s("code",[e._v("NOT EXISTS")]),e._v(", "),s("code",[e._v("IN")]),e._v(", "),s("code",[e._v("NOT IN")]),e._v(", "),s("code",[e._v("STRDT")]),e._v(", "),s("code",[e._v("timezone")]),e._v(" and "),s("code",[e._v("SHA384")]),e._v(" functions are not supported .")])]),e._v(" "),s("h2",{attrs:{id:"mapping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mapping"}},[e._v("#")]),e._v(" Mapping")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Are Bnodes supported in the mapping?")])]),e._v(" "),s("h2",{attrs:{id:"owl-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#owl-api"}},[e._v("#")]),e._v(" OWL API")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("Implementation")]),e._v(" of most OWLReasoner methods is missing.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("Symbol @")]),e._v(' When we pass a literal to the OWL API, if it finds an "@" it will interpret it as a language tag. The OWL API says:')])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\"If the datatype is  rdf:PlainLiteral, and the lexical value contains\na language tag then the language tag will   be parsed out of the lexical value. For example, \"abc@en\"^^rdf:PlainLiteral would be parsed into a lexical value  of 'abc' and a language tag of 'en'. \"\n")])])]),s("p",[e._v("Thus, if one expects such symbols in an object property the best solutions are:")]),e._v(" "),s("ol",[s("li",[e._v("cast the object to string in the mapping")]),e._v(" "),s("li",[e._v("replace the @ in the query with @.")])]),e._v(" "),s("h2",{attrs:{id:"databases-and-sql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#databases-and-sql"}},[e._v("#")]),e._v(" Databases and SQL")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Registered Keywords")]),e._v(" - when you have a column name that is also a registered DBMS keyword, you should enclose that column name in quotes. Supported common keywords are: cast, do, extract, first, following, last, materialized, nulls, partition, range, row, rows, siblings, value, xml.")]),e._v(" "),s("li",[s("code",[e._v("ORDER BY")]),e._v(" in H2: in presence of an Union, the last version of H2 (1.4.), it orders both subqueries independently of each other giving wrong results. See SPARQL-compliance test offset-1")]),e._v(" "),s("li",[s("code",[e._v("UNOPTIMIZED SQL OPERATORS/FUNCTIONS")]),e._v(": MIN/MAX, CASE, WHEN clause, DATE FUNCTIONS, NESTED SELECTS, MATCHES, RIGHT/FULL/SELF/CARTESIAN JOIN, SUBJOIN, ALL, ANY, UNION, INTERSECT, MINUM and EXCEPT: Unoptimized sql operators will be transformed in view and generate a result.")]),e._v(" "),s("li",[s("code",[e._v("UNSUPPORTED SQL OPERATORS")]),e._v(":  EXISTS, UNIQUE, TOP")]),e._v(" "),s("li",[s("code",[e._v("REGEX OPERATOR")]),e._v(" is not supported by MsSQL and DB2, while the other databases handle it differently")])]),e._v(" "),s("h2",{attrs:{id:"r2rml-mappings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#r2rml-mappings"}},[e._v("#")]),e._v(" R2RML mappings")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Are Bnodes supported in the mapping?")])]),e._v(" "),s("ul",[s("li",[e._v("no support for "),s("code",[e._v("inverseExpression")])]),e._v(" "),s("li",[e._v("predicate cannot be uritemplate (column reference or template declaration)")]),e._v(" "),s("li",[e._v("object cannot be uritemplate (column reference or template declaration) when predicate is rdf:type")]),e._v(" "),s("li",[e._v("no support for "),s("code",[e._v("bnode")]),e._v(" in Ontop")]),e._v(" "),s("li",[e._v("no support for "),s("code",[e._v("sqlversion")])]),e._v(" "),s("li",[e._v("no support for "),s("code",[e._v("graphMaps")]),e._v(" (hence context graphs)")]),e._v(" "),s("li",[e._v("bnode naming is arbitrary")]),e._v(" "),s("li",[e._v('constant type objects are returned as simple literal. Constant-valued term maps are not considered as having a term type, and specifying rr:termType on these term maps has no effect.\nFor example we return "2011-01-04T00:00:00.0"\ninstead of "2011-01-04T00:00:00.0"^^xsd:dateTime')])]),e._v(" "),s("p",[e._v("The current state of the W3C R2RML compliance tests could be seen [[W3C-R2RML-Compliance| here]]")]),e._v(" "),s("h2",{attrs:{id:"ontop-bootstrapper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ontop-bootstrapper"}},[e._v("#")]),e._v(" Ontop Bootstrapper")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Are Bnodes supported in the mapping?")])]),e._v(" "),s("ul",[s("li",[e._v("The BNode syntax generated by  Ontop bootstrapper cannot be processed by Ontop")]),e._v(" "),s("li",[e._v("Foreign keys on multiple columns are not supported")])])])}),[],!1,null,null,null);t.default=n.exports}}]);