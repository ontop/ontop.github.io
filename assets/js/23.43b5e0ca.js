(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{400:function(t,e,n){"use strict";n.r(e);var a=n(51),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"guice-conventions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#guice-conventions"}},[t._v("#")]),t._v(" Guice Conventions")]),t._v(" "),n("p",[t._v("Each module contains a folder "),n("code",[t._v("src/main/java/")]),t._v(" and a module "),n("code",[t._v("it.unibz.inf.ontop.injection/filename.properties")]),t._v(" (e.g., "),n("code",[t._v("mapping-default.properties")]),t._v(").")]),t._v(" "),n("p",[t._v("The file specifies to which implementation each interface needs to be instantiated. For instance, "),n("code",[t._v("mapping-default.properties")]),t._v(" contains the following lines")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("##########################################\n# Default implementations\n##########################################\n\nit.unibz.inf.ontop.spec.OBDASpecificationExtractor =  it.unibz.inf.ontop.spec.impl.DefaultOBDASpecificationExtractor\nit.unibz.inf.ontop.spec.mapping.transformer.MappingTransformer = it.unibz.inf.ontop.spec.mapping.transformer.impl.DefaultMappingTransformer\n...\n")])])]),n("p",[n("code",[t._v("DefaultOBDASpecificationExtractor")]),t._v(" is an implementation for the interface "),n("code",[t._v("OBDASpecificationExtractor")]),t._v(". The constructor, private, is injected, that is it has the "),n("code",[t._v("@Inject")]),t._v(" tag at its beginning.")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("@Inject\n    private DefaultOBDASpecificationExtractor(MappingExtractor mappingExtractor, MappingTransformer mappingTransformer,\n                                              OntopMappingSettings settings) {\n        this.mappingExtractor = mappingExtractor;\n        this.mappingTransformer = mappingTransformer;\n    }\n}\n")])])]),n("p",[t._v("The "),n("code",[t._v("@Inject")]),t._v(" means that the arguments to the constructor will be provided by the injection mechanism. For instance, the constructor for the second parameter is:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("@Inject\n    private DefaultMappingTransformer(MappingVariableNameNormalizer mappingNormalizer,\n                                      MappingSaturator mappingSaturator,\n                                      ABoxFactIntoMappingConverter inserter,\n                                      MappingMerger mappingMerger,\n                                      OntopMappingSettings settings,\n                                      MappingSameAsInverseRewriter sameAsInverseRewriter,\n                                      SpecificationFactory specificationFactory,\n                                      RDF rdfFactory,\n                                      MappingDistinctTransformer mappingDistinctTransformer) {\n        this.mappingNormalizer = mappingNormalizer;\n        this.mappingSaturator = mappingSaturator;\n        this.factConverter = inserter;\n        this.mappingMerger = mappingMerger;\n        this.settings = settings;\n        this.sameAsInverseRewriter = sameAsInverseRewriter;\n        this.specificationFactory = specificationFactory;\n        this.rdfFactory = rdfFactory;\n        this.mappingDistinctTransformer = mappingDistinctTransformer;\n    }\n")])])]),n("p",[t._v("And a constructor, let's say, for "),n("code",[t._v("RDFFactory")]),t._v(" is")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("public class SimpleRDF implements RDF {\n\n  public SimpleRDF() {\n  }\n  ...\n")])])]),n("p",[t._v("As you see, in the end we reach a constructor without parameters.")]),t._v(" "),n("p",[t._v("In "),n("code",[t._v("IntelliJ")]),t._v(", the name of the properties file binding a specific interface can also be retrieved through the "),n("code",[t._v("find usages")]),t._v(" functionality.")])])}),[],!1,null,null,null);e.default=i.exports}}]);